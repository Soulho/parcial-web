{"ast":null,"code":"var _jsxFileName = \"C:\\\\U\\\\parcial-web\\\\src\\\\components\\\\robots.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './robots.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Robots = () => {\n  _s();\n  const [robots, setRobots] = useState([]); // Estado para almacenar los robots\n  const [loading, setLoading] = useState(true); // Estado para manejar el estado de carga\n  const [error, setError] = useState(null); // Estado para manejar posibles errores\n\n  // Función para obtener los robots mediante una petición GET\n  useEffect(() => {\n    fetch(\"http://localhost:3001/robots\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Error al obtener los datos\");\n      }\n      return response.json();\n    }).then(data => {\n      setRobots(data); // Guardar los robots en el estado\n      setLoading(false); // Cambiar el estado de carga a falso\n    }).catch(error => {\n      setError(error.message); // Manejar el error\n      setLoading(false); // Cambiar el estado de carga a falso\n    });\n  }, []); // El array vacío indica que este efecto se ejecuta solo una vez al montar el componente\n\n  // Mostrar un mensaje de carga si los datos aún no han llegado\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando robots...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Mostrar un mensaje de error si hubo algún problema en la petición\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"robots-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Listado de Robots\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"robots-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nombre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Modelo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Empresa Fabricante\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: robots.map(robot => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: robot.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: robot.nombre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: robot.modelo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: robot.empresaFabricante\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)]\n          }, robot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Robots, \"xIlHgwInSwzZs9sbEPx7JrT3Zms=\");\n_c = Robots;\nexport default Robots;\nvar _c;\n$RefreshReg$(_c, \"Robots\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Robots","_s","robots","setRobots","loading","setLoading","error","setError","fetch","then","response","ok","Error","json","data","catch","message","children","fileName","_jsxFileName","lineNumber","columnNumber","NavBar","className","map","robot","id","nombre","modelo","empresaFabricante","_c","$RefreshReg$"],"sources":["C:/U/parcial-web/src/components/robots.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './robots.css';\r\n\r\nconst Robots = () => {\r\n  const [robots, setRobots] = useState([]); // Estado para almacenar los robots\r\n  const [loading, setLoading] = useState(true); // Estado para manejar el estado de carga\r\n  const [error, setError] = useState(null); // Estado para manejar posibles errores\r\n\r\n  // Función para obtener los robots mediante una petición GET\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:3001/robots\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Error al obtener los datos\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setRobots(data); // Guardar los robots en el estado\r\n        setLoading(false); // Cambiar el estado de carga a falso\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message); // Manejar el error\r\n        setLoading(false); // Cambiar el estado de carga a falso\r\n      });\r\n  }, []); // El array vacío indica que este efecto se ejecuta solo una vez al montar el componente\r\n\r\n  // Mostrar un mensaje de carga si los datos aún no han llegado\r\n  if (loading) {\r\n    return <div>Cargando robots...</div>;\r\n  }\r\n\r\n  // Mostrar un mensaje de error si hubo algún problema en la petición\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <NavBar></NavBar>\r\n        <div className=\"robots-container\">\r\n      <h1>Listado de Robots</h1>\r\n      <table className=\"robots-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Nombre</th>\r\n            <th>Modelo</th>\r\n            <th>Empresa Fabricante</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {robots.map((robot) => (\r\n            <tr key={robot.id}>\r\n              <td>{robot.id}</td>\r\n              <td>{robot.nombre}</td>\r\n              <td>{robot.modelo}</td>\r\n              <td>{robot.empresaFabricante}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Robots;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}